#include "../include/fpga_interface.h"
#include "xaxidma.h"
#include "xparameters.h"
#include "xintc.h"
#include "xil_exception.h"

#define VGA_BASE 					XPAR_BLOCKS_S00_AXI_BASEADDR
#define VGA_XPOS 					(*(uint16_t*)(VGA_BASE + 0))
#define VGA_YPOS 					(*(uint16_t*)(VGA_BASE + 2))
#define VGA_WIDTH 					(*(uint16_t*)(VGA_BASE + 4))
#define VGA_HEIGHT 					(*(uint16_t*)(VGA_BASE + 6))
#define VGA_XSCALE 					(*(uint16_t*)(VGA_BASE + 8))
#define VGA_YSCALE 					(*(uint16_t*)(VGA_BASE + 10))

#define VGA_PLAYER_BASE 			XPAR_PLAYER_S00_AXI_BASEADDR
#define VGA_PLAYER_XPOS 			(*(uint16_t*)(VGA_PLAYER_BASE + 0))
#define VGA_PLAYER_YPOS 			(*(uint16_t*)(VGA_PLAYER_BASE + 2))
#define VGA_PLAYER_WIDTH 			(*(uint16_t*)(VGA_PLAYER_BASE + 4))
#define VGA_PLAYER_HEIGHT 			(*(uint16_t*)(VGA_PLAYER_BASE + 6))
#define VGA_PLAYER_XSCALE 			(*(uint16_t*)(VGA_PLAYER_BASE + 8))
#define VGA_PLAYER_YSCALE 			(*(uint16_t*)(VGA_PLAYER_BASE + 10))

#define KEYBOARD_BASE				XPAR_KEYBOARDCONTROLLER_0_S00_AXI_BASEADDR
#define KEYBOARD_KEYS				(*(uint32_t*)(KEYBOARD_BASE + 0))

#define VGA_BACKGROUND_BASE 		XPAR_VGA_BACKGROUND_0_S00_AXI_BASEADDR
#define VGA_BACKGROUND_SHIFT_BG 	(*(uint32_t*)(VGA_BACKGROUND_BASE + 0))
#define VGA_BACKGROUND_SHIFT_SIDES 	(*(uint32_t*)(VGA_BACKGROUND_BASE + 4))

#define INTC_DEVICE_ID			  	XPAR_INTC_0_DEVICE_ID
#define INTC_DEVICE_INT_ID		  	XPAR_INTC_0_VGA_BLOCK_0_VEC_ID
#define INTC_DEVICE_KEYBOARD_ID	 	XPAR_INTC_0_KEYBOARDCONTROLLER_0_VEC_ID

typedef void (*fn_callback)(void *);
fn_callback keyboard_update_handler;

static Game *GameInstance;

XAxiDma blocks_dma;
XAxiDma_Config *blocks_dma_config;

XAxiDma player_dma;
XAxiDma_Config *player_dma_config;

XIntc InterruptController;

static inline void dma_transfer_texture(XAxiDma *dma, texture_t texture){
	XAxiDma_SimpleTransfer(
		dma,
		(UINTPTR)texture_memory[texture].pixel_data,
		texture_memory[texture].height * texture_memory[texture].width * texture_memory[texture].bytes_per_pixel,
		XAXIDMA_DMA_TO_DEVICE
	);
}

static void interrupt_init(XIntc *InterruptController, void(*callback)(void*), u16 interrupt_device_id, u8 interrupt_vector ){

	if (!InterruptController->IsReady) XIntc_Initialize(InterruptController,  interrupt_device_id);
	XIntc_Connect(InterruptController, interrupt_vector, (XInterruptHandler)callback, (void *)0);
	if (!InterruptController->IsStarted) XIntc_Start(InterruptController, XIN_REAL_MODE);
	XIntc_Enable(InterruptController, interrupt_vector);

	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT, (Xil_ExceptionHandler)XIntc_InterruptHandler, InterruptController);
	Xil_ExceptionEnable();
}

static void block_update_handler(void *CallbackRef)
{
	static int i = N_FLOORS - 1;

	if(--i < 0){
		 i = 4;
	}

	Line2d currentFloor = GameInstance->GetFloor(i);
	texture_t current_texture = GameInstance->GetFloorTexture(i);

	dma_transfer_texture( &blocks_dma, current_texture );

	VGA_XPOS = currentFloor.GetStart().GetX();
	VGA_WIDTH = currentFloor.GetEnd().GetX() - currentFloor.GetStart().GetX();

	VGA_HEIGHT = FLOOR_HEIGHT;
	int y = MAX_Y + 1 - FLOOR_HEIGHT - (int)currentFloor.GetStart().GetY();
	if(y < 0){
		y = MAX_Y + 1 + VGA_HEIGHT + y;
	}
	VGA_YPOS = y;
}

void initialize_interface(Game *Instance){
	GameInstance = Instance;

	dma_transfer_texture( &player_dma, TEXTURE_PLAYER );

	VGA_XPOS = 0;
	VGA_YPOS = 1024;
	VGA_XSCALE = 2;
	VGA_YSCALE = 2;
	VGA_WIDTH = 1;
	VGA_HEIGHT = 1;

	VGA_PLAYER_XPOS = GameInstance->GetPlayer().getPosition().GetX();
	VGA_PLAYER_YPOS = GameInstance->GetPlayer().getPosition().GetY() -  128;
	VGA_PLAYER_XSCALE = 2;
	VGA_PLAYER_YSCALE = 2;
	VGA_PLAYER_WIDTH = 64;
	VGA_PLAYER_HEIGHT = 64;
}

void interface_update(){

	VGA_PLAYER_YPOS = MAX_Y + 1 - 2*PLAYER_HEIGHT - GameInstance->GetPlayer().getPosition().GetY();
	VGA_PLAYER_XPOS = GameInstance->GetPlayer().getPosition().GetX() - PLAYER_WIDTH / 2;

	VGA_BACKGROUND_SHIFT_BG = (int)GameInstance->GetSidesPosition();
	VGA_BACKGROUND_SHIFT_SIDES = (int)GameInstance->GetFloorsPosition();

}

void initialize_hardware(){

	player_dma_config = XAxiDma_LookupConfig(XPAR_AXIDMA_1_DEVICE_ID);
	XAxiDma_CfgInitialize(&player_dma, player_dma_config);

	blocks_dma_config = XAxiDma_LookupConfig(XPAR_AXIDMA_0_DEVICE_ID);
	XAxiDma_CfgInitialize(&blocks_dma, blocks_dma_config);

	interrupt_init(&InterruptController, block_update_handler, INTC_DEVICE_ID, INTC_DEVICE_INT_ID);
//	interrupt_init(&InterruptController, keyboard_update_handler, INTC_DEVICE_ID, INTC_DEVICE_KEYBOARD_ID);
}


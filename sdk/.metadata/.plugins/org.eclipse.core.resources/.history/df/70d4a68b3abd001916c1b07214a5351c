#include "../include/game.hpp"

#include "xil_printf.h"

Game::Game() : 
    //Player1(Point2d((MIN_X + MAX_X)/2 - (PLAYER_WIDTH / 2), FLOOR_HEIGHT + PLAYER_HEIGHT), Point2d(0, 0), Point2d(0, ACCELERATION)),
	Player1(Point2d((MIN_X + MAX_X)/2 - (PLAYER_WIDTH / 2),0), Point2d(0, 0), Point2d(0, ACCELERATION)),
    gameTime(0.0f),
	floorCounter(5),
	floorsPosition(0),
	sidesPosition(0),
    isStarted(false),
	gameOver(false),
	PlayerLocked(true),
	PlayerLockFloor(0)
{

    this->floors[0] = Line2d( Point2d(MIN_X,0), Point2d(MAX_X, 0) );

    for(int i = 1; i < N_FLOORS; i++){
    	this->floors[i] = Line2d::RandomLine(200, 600, MIN_X, MAX_X, FLOOR_SPACING * i);
    }

    this->PlayerLocked = true;
    this->PlayerLockFloor = 4;
}

void Game::Display(){

}

#include "xparameters.h"
#define KEY_SPACE (1 << 0)
#define KEYBOARD_BASE		XPAR_KEYBOARDCONTROLLER_0_S00_AXI_BASEADDR
#define KEYBOARD_KEYS		(*(uint32_t*)(KEYBOARD_BASE + 0))

void Game::Run(){

	if(KEYBOARD_KEYS & KEY_SPACE){
	//	this->Player1.changePosition(Point2d(0, 5));
		this->isStarted = 1;
	}

	if(this->isStarted){

		if(this->PlayerLocked){
			this->Player1.setPosition( this->floors[this->PlayerLockFloor].GetStart() );
		}
		else {
			Point2d p1 = Player1.getPosition();
			this->Player1.calculateNextPosition(0.01);
			Point2d p2 = Player1.getPosition();
			Line2d PlayerMove(p2, p1);

			Point2d solution;
			for(int i = 0; i < N_FLOORS; i++){
				if ( this->floors[i].CheckIntersection( PlayerMove, solution ) ){
					xil_printf("intersection, %d\r\n", i);
				}
			}
		}

		if(this->Player1.getPosition().GetY() < PLAYER_MIN_Y){
			this->Player1.setPosition( Point2d( this->Player1.getPosition().GetX(), PLAYER_MIN_Y ) );
			this->Player1.setVelocity( this->Player1.getVelocity() * Point2d(1, 0) );
			this->gameOver = true;
		}

		if(this->gameOver){
			this->isStarted = false;
			this = Game;
		}

		int moveRate = 1;
		for(int i = 0; i < N_FLOORS; i++){
			if(this->floorCounter % 100){
				if (this->floors[i].moveDown(moveRate,-FLOOR_HEIGHT,MAX_Y, false) ) this->floorCounter++;
			}
			else{
				if (this->floors[i].moveDown(moveRate,-FLOOR_HEIGHT,MAX_Y, true) ) this->floorCounter++;
			}
		}


		if(this->PlayerLocked){
			if (this->floors[this->PlayerLockFloor].GetStart().GetY() < -FLOOR_HEIGHT + 1){
				this->PlayerLocked = false;
			}
		}

		this->floorsPosition -= moveRate;
		this->sidesPosition = this->floorsPosition / 2;
	}

}

Line2d Game::GetFloor(int FloorIndex){return this->floors[FloorIndex];};
Player Game::GetPlayer(){return this->Player1;};
float Game::GetFloorsPosition(){return this->floorsPosition;};
float Game::GetSidesPosition(){return this->sidesPosition;};

#include "xstatus.h"
#include "xaxidma.h"
#include "xparameters.h"
#include "xintc.h"
#include "xil_exception.h"
#include "../include/game.hpp"
#include "../include/textures.h"
#include "../include/utils.h"


#define VGA_BASE 			XPAR_BLOCKS_S00_AXI_BASEADDR
#define VGA_XPOS 			(*(uint16_t*)(VGA_BASE + 0))
#define VGA_YPOS 			(*(uint16_t*)(VGA_BASE + 2))
#define VGA_WIDTH 			(*(uint16_t*)(VGA_BASE + 4))
#define VGA_HEIGHT 			(*(uint16_t*)(VGA_BASE + 6))
#define VGA_XSCALE 			(*(uint16_t*)(VGA_BASE + 8))
#define VGA_YSCALE 			(*(uint16_t*)(VGA_BASE + 10))

#define VGA_PLAYER_BASE 	XPAR_PLAYER_S00_AXI_BASEADDR
#define VGA_PLAYER_XPOS 	(*(uint16_t*)(VGA_PLAYER_BASE + 0))
#define VGA_PLAYER_YPOS 	(*(uint16_t*)(VGA_PLAYER_BASE + 2))
#define VGA_PLAYER_WIDTH 	(*(uint16_t*)(VGA_PLAYER_BASE + 4))
#define VGA_PLAYER_HEIGHT 	(*(uint16_t*)(VGA_PLAYER_BASE + 6))
#define VGA_PLAYER_XSCALE 	(*(uint16_t*)(VGA_PLAYER_BASE + 8))
#define VGA_PLAYER_YSCALE 	(*(uint16_t*)(VGA_PLAYER_BASE + 10))

#define KEYBOARD_BASE		XPAR_KEYBOARDCONTROLLER_0_S00_AXI_BASEADDR
#define KEYBOARD_KEYS		(*(uint16_t*)(KEYBOARD_BASE + 0))

#define VGA_BACKGROUND_BASE 	XPAR_VGA_BACKGROUND_0_S00_AXI_BASEADDR
#define VGA_BACKGROUND_SHIFT_BG 	(*(uint32_t*)(VGA_BACKGROUND_BASE + 0))
#define VGA_BACKGROUND_SHIFT_SIDES 	(*(uint32_t*)(VGA_BACKGROUND_BASE + 4))

static inline u16 rgb565torgb444(u16 rgb565){
	return ( ((rgb565 & 0x1e) >> 1) | ((rgb565 & 0x780) >> 3)  | ((rgb565 & 0xf000) >> 4) );
}

XAxiDma dma;
XAxiDma_Config *dma_config;

XAxiDma dma1;
XAxiDma_Config *dma_config1;

Game GameInstance;

XIntc InterruptController;
#define INTC_DEVICE_ID			  XPAR_INTC_0_DEVICE_ID
#define INTC_DEVICE_INT_ID		  XPAR_INTC_0_VGA_BLOCK_0_VEC_ID
#define INTC_DEVICE_KEYBOARD_ID	  XPAR_INTC_0_KEYBOARDCONTROLLER_0_VEC_ID


int it_counter = 0;
int block_counter = 0;

void DeviceDriverHandler(void *CallbackRef)
{
	static int i = 4;

	it_counter++;

	XAxiDma_SimpleTransfer(&dma, (UINTPTR)texture_memory[TEXTURE_REDSTONE].pixel_data, 16*16*2, XAXIDMA_DMA_TO_DEVICE);

	if(--i < 0){
		 i = 4;
	}

	Line2d currentFloor = GameInstance.GetFloor(i);

	VGA_XPOS = currentFloor.GetStart().GetX();
	VGA_WIDTH = currentFloor.GetEnd().GetX() - currentFloor.GetStart().GetX();

	VGA_HEIGHT = 64;
	int y = 1024 - 64 - (int)currentFloor.GetStart().GetY();
	if(y < 0){
		y = 1023 + VGA_HEIGHT + y;
	}
	VGA_YPOS = y;
}

void KeyboardHandler(void *CallbackRef)
{
	xil_printf("%d\r\n", KEYBOARD_KEYS);
}

void interrupt_init(XIntc *InterruptController, void(*callback)(void*), u16 interrupt_device_id, u8 interrupt_vector ){

	if (!InterruptController->IsReady) XIntc_Initialize(InterruptController,  interrupt_device_id);
	XIntc_Connect(InterruptController, interrupt_vector, (XInterruptHandler)callback, (void *)0);
	if (!InterruptController->IsStarted) XIntc_Start(InterruptController, XIN_REAL_MODE);
	XIntc_Enable(InterruptController, interrupt_vector);

	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT, (Xil_ExceptionHandler)XIntc_InterruptHandler, InterruptController);
	Xil_ExceptionEnable();
}

int main(){

    xil_printf("dupxo\r\n");

	VGA_XPOS = 0;
	VGA_YPOS = 1024;
	VGA_XSCALE = 2;
	VGA_YSCALE = 2;
	VGA_WIDTH = 1;
	VGA_HEIGHT = 1;

	VGA_PLAYER_XPOS = GameInstance.GetPlayer().getPosition().GetX();
	VGA_PLAYER_YPOS = GameInstance.GetPlayer().getPosition().GetY() -  128;
	//VGA_PLAYER_YPOS = 1024;
	VGA_PLAYER_XSCALE = 1;
	VGA_PLAYER_YSCALE = 1;
	VGA_PLAYER_WIDTH = 64;
	VGA_PLAYER_HEIGHT = 64;

	dma_config = XAxiDma_LookupConfig(XPAR_AXIDMA_0_DEVICE_ID);
	XAxiDma_CfgInitialize(&dma, dma_config);

	dma_config1 = XAxiDma_LookupConfig(XPAR_AXIDMA_1_DEVICE_ID);
	XAxiDma_CfgInitialize(&dma1, dma_config1);

	uint16_t *pTex = (uint16_t *)texture_memory[TEXTURE_REDSTONE].pixel_data;

	for (int i = 0; i < 16*16; i++){
		pTex[i] = rgb565torgb444(pTex[i]);
	}

	XAxiDma_SimpleTransfer(&dma, (UINTPTR)texture_memory[TEXTURE_REDSTONE].pixel_data, 16*16*2, XAXIDMA_DMA_TO_DEVICE);
	while( XAxiDma_Busy(&dma, XAXIDMA_DMA_TO_DEVICE) );

	XAxiDma_SimpleTransfer(&dma1, (UINTPTR)texture_memory[TEXTURE_REDSTONE].pixel_data, 16*16*2, XAXIDMA_DMA_TO_DEVICE);
	while( XAxiDma_Busy(&dma1, XAXIDMA_DMA_TO_DEVICE) );

    interrupt_init(&InterruptController, DeviceDriverHandler, INTC_DEVICE_ID, INTC_DEVICE_INT_ID);
    interrupt_init(&InterruptController, KeyboardHandler, INTC_DEVICE_ID, INTC_DEVICE_KEYBOARD_ID);

    while(1){

    	int i = 0;
		while(i++ < 100000);
    	GameInstance.Run();

    	VGA_BACKGROUND_SHIFT_BG = (int)GameInstance.GetSidesPosition();
    	VGA_BACKGROUND_SHIFT_SIDES = (int)GameInstance.GetFloorsPosition();

		VGA_PLAYER_YPOS = 1024 - 64 - 64 - GameInstance.GetPlayer().getPosition().GetY();
		VGA_PLAYER_XPOS = GameInstance.GetPlayer().getPosition().GetX();
    }
}
